
一：SQLite创建知识库和知识库中的知识文档 表

主要是连接本地SQLite数据库，并创建与数据库表对应的知识库和知识文档 映射实体类
以及连接数据库的Session对象

二：ElasticSearch 向量数据库初始化（创建存储 文档向量化后的数据 的表）

主要是连接es向量库的连接对象，以及初始化操作

三：FastApi 接口
1.定义 对知识库操作的接口（crud），通过session操作sqlite数据库
2.定义 对知识文档操作的接口（crud），通过session操作sqlite数据库，在新增知识文档时，需要在增加完成后，对其内容进行向量化操作（将其存储到es向量库对应的向量表中）
3.在文档内容向量化步骤：
①判断操作的文件类型（word，pdf...）
②根据不同的文件类型，调用不同的操作方法（pdf向量化方法）
③首先通过地址读取到文件，循环遍历每一页内容，通过embedding模型对其向量化。
④将不同页码的内容先整体向量化，再将其chunk分块，对chunk后的N块，统一进行向量化（通过页码和chunk_id进行区分）
4.定义rag接口，完成多轮问答任务：
①对传入的问答内容通过不同的检索系统 获取与之相关的topN个文档内容（关键字检索，语义检索）
②对两种检索方式后的结果 进行整体打分（整合正一个打分结果）
③通过重排序，对打分后的结果再进行一次整体的排名（RRF等融合排名，可针对不同检索系统返回的信息，进行整体排名）
④获取最终的topN，将其整合到prompt中一并交给LLM
⑤第一次用户发送信息，后端需要整合prompt，并将LLM返回的结果与用户发送的信息整合在一起一并返回，后续的请求信息需要带着之前的message，此时无需整理prompt，直接调用LLM即可


总结：
RAG整体流程：
1.用户提问
2.es向量库全文检索（关键字检索，语义检索）
3.对检索结果进行重排序（RRF等），提取topN
4.将topN文档内容整合到prompt
5.调用LLM接口，传递prompt
6.对LLM返回结果以及用户提问信息整合，实现多轮问答任务
